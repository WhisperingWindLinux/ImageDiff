#include "htmlreportformatter.h"

#include <QFile>
#include <QTextStream>
#include <qdir.h>

// Function to create a folder, generate report.html, and save images.
// Returns the report directory path
bool HtmlReportFormatter::createReportPage(const QString &folderPath,
                                           const QImage &firstOriginalImage,
                                           const QImage &secondOriginalImage,
                                           const QString &firstImageName,
                                           const QString &secondImageName,
                                           const QList<QPair<QString, QImage>> &comporatorsResults,
                                           const QList<QString> descriptions)
{
    if (comporatorsResults.size() != descriptions.size()) {
        return false;
    }

    // Create the main folder
    QDir dir(folderPath);
    if (!dir.exists()) {
        dir.mkpath(".");
    }

    // Create the images subfolder
    QString imagesFolderPath = folderPath + "/images";
    QDir imagesDir(imagesFolderPath);
    if (!imagesDir.exists()) {
        imagesDir.mkpath(".");
    }

    // Save the two main images
    firstOriginalImage.save(imagesFolderPath + "/" + firstImageName);
    secondOriginalImage.save(imagesFolderPath + "/" + secondImageName);

    // Create the HTML report file
    QFile reportFile(folderPath + "/report.html");
    if (!reportFile.open(QIODevice::WriteOnly | QIODevice::Text)) {
        return false; // Exit if file couldn't be opened
    }

    QTextStream out(&reportFile);

    // Start writing the HTML content
    out << R"(<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Comparison Report</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; background-color: #f4f4f9; color: #333; margin: 0; padding: 20px; }
        h1 { font-size: 36px; color: #2c3e50; }
        h2 { font-size: 24px; color: #34495e; }
        table { margin: 20px auto; border-collapse: collapse; width: 80%; }
        th, td { border: 1px solid #ddd; padding: 10px; text-align: center; }
        th { background-color: #f4f4f9; font-weight: bold; }
        img { max-width: 300px; max-height: 200px; }
        hr { margin: 40px 0; border: none; border-top: 2px solid #ddd; }
        .additional-section { margin-top: 20px; }
    </style>
</head>
<body>
)";

    // Add the main header
    out << R"(
<h1>Image comparison report</h1>
<h2>An Analysis of )" << firstImageName << R"( and )" << secondImageName << R"(</h2>
<p>This report was generated by the ImageDiff application. It provides a comparison of the two images, highlighting their differences and similarities.</p>
<hr>
)";

    // Add the comparison table
    out << R"(
<table>
    <tr>
        <th>)" << firstImageName << R"(</th>
        <th>)" << secondImageName << R"(</th>
    </tr>
    <tr>
        <td><a href="images/)" << firstImageName << R"("><img src="images/)" << firstImageName << R"(" alt=")" << firstImageName << R"("></a></td>
        <td><a href="images/)" << secondImageName << R"("><img src="images/)" << secondImageName << R"(" alt=")" << secondImageName << R"("></a></td>
    </tr>
</table>
<hr>
)";

    // Add additional images from the QList
    for (int i = 0; i < comporatorsResults.size(); i++) {
        const auto &pair =comporatorsResults[i];
        if (!pair.second.isNull()) {
            out << R"(
            <div class="additional-section">
                <p><h2>)" << pair.first << R"(</h2></p>
            )";
            QString additionalImagePath = imagesFolderPath + "/" + pair.first + ".png";
            pair.second.save(additionalImagePath);
            out << R"(<a href="images/)" << pair.first + ".png" << R"("><img src="images/)" << pair.first + ".png" << R"(" alt=")" << pair.first << R"("></a><br/><br/>)";
        }
        else {
            out << R"(
            <div class="additional-section">
                <p>)" << pair.first << R"(</p>
            )";
        }
        out << descriptions[i] << "<br>";
        out << "</div>";
    }

    // Close the HTML tags
    out << R"(
</body>
</html>
)";
    return true;
}
